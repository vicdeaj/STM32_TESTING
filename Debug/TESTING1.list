
TESTING1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fcc  08002fcc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fd4  08002fd4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000084  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005a9a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001222  00000000  00000000  00025ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  00026d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004b8  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4fb  00000000  00000000  00027708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006411  00000000  00000000  00046c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee00  00000000  00000000  0004d014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010be14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000143c  00000000  00000000  0010be68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ebc 	.word	0x08002ebc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002ebc 	.word	0x08002ebc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b098      	sub	sp, #96	; 0x60
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc2b 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f8b5 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f989 	bl	80007e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d2:	f000 f91b 	bl	800070c <MX_CAN1_Init>
  MX_CAN2_Init();
 80004d6:	f000 f94f 	bl	8000778 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
// set up filter for accepting everything (mask = 0)
  CAN_FilterTypeDef filterconfig = {0};
 80004da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fce2 	bl	8002eac <memset>
  filterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80004e8:	2301      	movs	r3, #1
 80004ea:	65bb      	str	r3, [r7, #88]	; 0x58
  filterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80004ec:	2300      	movs	r3, #0
 80004ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  filterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64bb      	str	r3, [r7, #72]	; 0x48
  filterconfig.FilterIdHigh = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	63bb      	str	r3, [r7, #56]	; 0x38
  filterconfig.FilterIdLow = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  filterconfig.FilterMaskIdHigh = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	643b      	str	r3, [r7, #64]	; 0x40
  filterconfig.FilterMaskIdLow = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	647b      	str	r3, [r7, #68]	; 0x44
  filterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000504:	2300      	movs	r3, #0
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
  filterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000508:	2301      	movs	r3, #1
 800050a:	657b      	str	r3, [r7, #84]	; 0x54
  filterconfig.SlaveStartFilterBank = 15;  // how many filters to assign to the CAN1 (master can)
 800050c:	230f      	movs	r3, #15
 800050e:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_CAN_ConfigFilter(&hcan1, &filterconfig);
 8000510:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000514:	4619      	mov	r1, r3
 8000516:	483f      	ldr	r0, [pc, #252]	; (8000614 <main+0x154>)
 8000518:	f000 feb4 	bl	8001284 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 800051c:	483d      	ldr	r0, [pc, #244]	; (8000614 <main+0x154>)
 800051e:	f000 ffff 	bl	8001520 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000522:	483d      	ldr	r0, [pc, #244]	; (8000618 <main+0x158>)
 8000524:	f000 fffc 	bl	8001520 <HAL_CAN_Start>

  CAN_TxHeaderTypeDef TxHeader = {0};
 8000528:	f107 0320 	add.w	r3, r7, #32
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
 8000538:	615a      	str	r2, [r3, #20]
  TxHeader.StdId = 0x777;
 800053a:	f240 7377 	movw	r3, #1911	; 0x777
 800053e:	623b      	str	r3, [r7, #32]
  TxHeader.IDE = CAN_ID_STD;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
  TxHeader.RTR = CAN_RTR_DATA;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxHeader.DLC = 2;
 8000548:	2302      	movs	r3, #2
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  TxHeader.TransmitGlobalTime = DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  CAN_RxHeaderTypeDef RxHeader = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
 8000560:	615a      	str	r2, [r3, #20]
 8000562:	619a      	str	r2, [r3, #24]

  HAL_Delay(1000);
 8000564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000568:	f000 fc4c 	bl	8000e04 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, command, &mailbox) != HAL_OK){
 800056c:	f107 0120 	add.w	r1, r7, #32
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <main+0x15c>)
 8000572:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <main+0x160>)
 8000574:	4828      	ldr	r0, [pc, #160]	; (8000618 <main+0x158>)
 8000576:	f001 f817 	bl	80015a8 <HAL_CAN_AddTxMessage>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d019      	beq.n	80005b4 <main+0xf4>
		  statusCan1 = HAL_CAN_GetState(&hcan1);
 8000580:	4824      	ldr	r0, [pc, #144]	; (8000614 <main+0x154>)
 8000582:	f001 fa87 	bl	8001a94 <HAL_CAN_GetState>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0x164>)
 800058c:	701a      	strb	r2, [r3, #0]
		  statusCan2 = HAL_CAN_GetState(&hcan2);
 800058e:	4822      	ldr	r0, [pc, #136]	; (8000618 <main+0x158>)
 8000590:	f001 fa80 	bl	8001a94 <HAL_CAN_GetState>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <main+0x168>)
 800059a:	701a      	strb	r2, [r3, #0]
		  errorCan1 = HAL_CAN_GetError(&hcan1);
 800059c:	481d      	ldr	r0, [pc, #116]	; (8000614 <main+0x154>)
 800059e:	f001 faa1 	bl	8001ae4 <HAL_CAN_GetError>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <main+0x16c>)
 80005a6:	6013      	str	r3, [r2, #0]
		  errorCan2 = HAL_CAN_GetError(&hcan2);
 80005a8:	481b      	ldr	r0, [pc, #108]	; (8000618 <main+0x158>)
 80005aa:	f001 fa9b 	bl	8001ae4 <HAL_CAN_GetError>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <main+0x170>)
 80005b2:	6013      	str	r3, [r2, #0]
//			__asm__("BKPT");
	  }

	  HAL_Delay(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b8:	f000 fc24 	bl	8000e04 <HAL_Delay>


	  if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0){
 80005bc:	2100      	movs	r1, #0
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <main+0x154>)
 80005c0:	f001 fa34 	bl	8001a2c <HAL_CAN_GetRxFifoFillLevel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <main+0x116>
		  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, received);
 80005ca:	1d3a      	adds	r2, r7, #4
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <main+0x174>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4810      	ldr	r0, [pc, #64]	; (8000614 <main+0x154>)
 80005d2:	f001 f90d 	bl	80017f0 <HAL_CAN_GetRxMessage>
	  }

	  statusCan1 = HAL_CAN_GetState(&hcan1);
 80005d6:	480f      	ldr	r0, [pc, #60]	; (8000614 <main+0x154>)
 80005d8:	f001 fa5c 	bl	8001a94 <HAL_CAN_GetState>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0x164>)
 80005e2:	701a      	strb	r2, [r3, #0]
	  statusCan2 = HAL_CAN_GetState(&hcan2);
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <main+0x158>)
 80005e6:	f001 fa55 	bl	8001a94 <HAL_CAN_GetState>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0x168>)
 80005f0:	701a      	strb	r2, [r3, #0]
	  errorCan1 = HAL_CAN_GetError(&hcan1);
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <main+0x154>)
 80005f4:	f001 fa76 	bl	8001ae4 <HAL_CAN_GetError>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <main+0x16c>)
 80005fc:	6013      	str	r3, [r2, #0]
	  errorCan2 = HAL_CAN_GetError(&hcan2);
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x158>)
 8000600:	f001 fa70 	bl	8001ae4 <HAL_CAN_GetError>
 8000604:	4603      	mov	r3, r0
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <main+0x170>)
 8000608:	6013      	str	r3, [r2, #0]


	  HAL_Delay(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060e:	f000 fbf9 	bl	8000e04 <HAL_Delay>
	  if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, command, &mailbox) != HAL_OK){
 8000612:	e7ab      	b.n	800056c <main+0xac>
 8000614:	20000068 	.word	0x20000068
 8000618:	20000040 	.word	0x20000040
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000
 8000624:	20000030 	.word	0x20000030
 8000628:	20000031 	.word	0x20000031
 800062c:	20000034 	.word	0x20000034
 8000630:	20000038 	.word	0x20000038
 8000634:	20000090 	.word	0x20000090

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fc30 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006ac:	2340      	movs	r3, #64	; 0x40
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fe39 	bl	8002334 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f9ea 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80006d4:	23c0      	movs	r3, #192	; 0xc0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f94a 	bl	8002984 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f9d3 	bl	8000aa0 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_CAN1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_CAN1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_CAN1_Init+0x64>)
 8000718:	2204      	movs	r2, #4
 800071a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_CAN1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_CAN1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_CAN1_Init+0x64>)
 800072a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800072e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_CAN1_Init+0x64>)
 8000732:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000736:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_CAN1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_CAN1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_CAN1_Init+0x64>)
 800075e:	f000 fb75 	bl	8000e4c <HAL_CAN_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f99a 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000068 	.word	0x20000068
 8000774:	40006400 	.word	0x40006400

08000778 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_CAN2_Init+0x64>)
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_CAN2_Init+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_CAN2_Init+0x64>)
 8000784:	2204      	movs	r2, #4
 8000786:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_CAN2_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_CAN2_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_CAN2_Init+0x64>)
 8000796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_CAN2_Init+0x64>)
 800079e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007a2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_CAN2_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_CAN2_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_CAN2_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_CAN2_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_CAN2_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_CAN2_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_CAN2_Init+0x64>)
 80007ca:	f000 fb3f 	bl	8000e4c <HAL_CAN_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f964 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000040 	.word	0x20000040
 80007e0:	40006800 	.word	0x40006800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4ba2      	ldr	r3, [pc, #648]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4aa1      	ldr	r2, [pc, #644]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b9f      	ldr	r3, [pc, #636]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b9b      	ldr	r3, [pc, #620]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a9a      	ldr	r2, [pc, #616]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b98      	ldr	r3, [pc, #608]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b94      	ldr	r3, [pc, #592]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b91      	ldr	r3, [pc, #580]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b8d      	ldr	r3, [pc, #564]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a8c      	ldr	r2, [pc, #560]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b8a      	ldr	r3, [pc, #552]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b86      	ldr	r3, [pc, #536]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a85      	ldr	r2, [pc, #532]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b83      	ldr	r3, [pc, #524]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b7f      	ldr	r3, [pc, #508]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a7e      	ldr	r2, [pc, #504]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b7c      	ldr	r3, [pc, #496]	; (8000a88 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4879      	ldr	r0, [pc, #484]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80008a8:	f001 fd12 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2101      	movs	r1, #1
 80008b0:	4877      	ldr	r0, [pc, #476]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80008b2:	f001 fd0d 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	2200      	movs	r2, #0
 80008b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008bc:	4875      	ldr	r0, [pc, #468]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 80008be:	f001 fd07 	bl	80022d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c2:	2308      	movs	r3, #8
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	486c      	ldr	r0, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 80008da:	f001 fa19 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4866      	ldr	r0, [pc, #408]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80008f6:	f001 fa0b 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	485e      	ldr	r0, [pc, #376]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 8000916:	f001 f9fb 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	485a      	ldr	r0, [pc, #360]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000930:	f001 f9ee 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000934:	2310      	movs	r3, #16
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000944:	2306      	movs	r3, #6
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4852      	ldr	r0, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000950:	f001 f9de 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000954:	23e0      	movs	r3, #224	; 0xe0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000964:	2305      	movs	r3, #5
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	484a      	ldr	r0, [pc, #296]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000970:	f001 f9ce 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000974:	2304      	movs	r3, #4
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4845      	ldr	r0, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x2b8>)
 8000988:	f001 f9c2 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800098c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	483c      	ldr	r0, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x2b8>)
 80009aa:	f001 f9b1 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4833      	ldr	r0, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 80009c8:	f001 f9a2 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009de:	2306      	movs	r3, #6
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4829      	ldr	r0, [pc, #164]	; (8000a90 <MX_GPIO_Init+0x2ac>)
 80009ea:	f001 f991 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000a04:	f001 f984 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481c      	ldr	r0, [pc, #112]	; (8000a98 <MX_GPIO_Init+0x2b4>)
 8000a26:	f001 f973 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <MX_GPIO_Init+0x2b0>)
 8000a3e:	f001 f967 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a54:	2304      	movs	r3, #4
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480f      	ldr	r0, [pc, #60]	; (8000a9c <MX_GPIO_Init+0x2b8>)
 8000a60:	f001 f956 	bl	8001d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0x2a8>)
 8000a7a:	f001 f949 	bl	8001d10 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020c00 	.word	0x40020c00
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>

08000aaa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	__asm__("BKPT");
 8000ab4:	be00      	bkpt	0x0000
  /* USER CODE END 6 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f001 f8ac 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <HAL_CAN_MspInit+0x128>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d135      	bne.n	8000ba2 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b36:	4b42      	ldr	r3, [pc, #264]	; (8000c40 <HAL_CAN_MspInit+0x12c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <HAL_CAN_MspInit+0x12c>)
 8000b3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b40:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <HAL_CAN_MspInit+0x12c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10d      	bne.n	8000b64 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a3c      	ldr	r2, [pc, #240]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b3a      	ldr	r3, [pc, #232]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a35      	ldr	r2, [pc, #212]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b80:	2303      	movs	r3, #3
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b90:	2309      	movs	r3, #9
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	482b      	ldr	r0, [pc, #172]	; (8000c48 <HAL_CAN_MspInit+0x134>)
 8000b9c:	f001 f8b8 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ba0:	e048      	b.n	8000c34 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a29      	ldr	r2, [pc, #164]	; (8000c4c <HAL_CAN_MspInit+0x138>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d143      	bne.n	8000c34 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_CAN_MspInit+0x12c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_CAN_MspInit+0x12c>)
 8000bd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <HAL_CAN_MspInit+0x12c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10d      	bne.n	8000bf6 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_CAN_MspInit+0x130>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000c12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000c24:	2309      	movs	r3, #9
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HAL_CAN_MspInit+0x13c>)
 8000c30:	f001 f86e 	bl	8001d10 <HAL_GPIO_Init>
}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40006400 	.word	0x40006400
 8000c40:	2000003c 	.word	0x2000003c
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	40006800 	.word	0x40006800
 8000c50:	40020400 	.word	0x40020400

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f890 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd2:	490e      	ldr	r1, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce8:	4c0b      	ldr	r4, [pc, #44]	; (8000d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cf6:	f7ff ffd7 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f002 f8b3 	bl	8002e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfe:	f7ff fbdf 	bl	80004c0 <main>
  bx  lr    
 8000d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d10:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 8000d14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d18:	20000098 	.word	0x20000098

08000d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_Init+0x40>)
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_Init+0x40>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_Init+0x40>)
 8000d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 ff89 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff feb6 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023c00 	.word	0x40023c00

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 ffb8 	bl	8001cf8 <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f000 ff7e 	bl	8001ca0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	2000000c 	.word	0x2000000c

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000010 	.word	0x20000010
 8000de8:	20000094 	.word	0x20000094

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000094 	.word	0x20000094

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000010 	.word	0x20000010

08000e4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e20e      	b.n	800127c <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4aa0      	ldr	r2, [pc, #640]	; (80010e4 <HAL_CAN_Init+0x298>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d009      	beq.n	8000e7c <HAL_CAN_Init+0x30>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a9e      	ldr	r2, [pc, #632]	; (80010e8 <HAL_CAN_Init+0x29c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d004      	beq.n	8000e7c <HAL_CAN_Init+0x30>
 8000e72:	f240 111d 	movw	r1, #285	; 0x11d
 8000e76:	489d      	ldr	r0, [pc, #628]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000e78:	f7ff fe17 	bl	8000aaa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7e1b      	ldrb	r3, [r3, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d008      	beq.n	8000e96 <HAL_CAN_Init+0x4a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e1b      	ldrb	r3, [r3, #24]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d004      	beq.n	8000e96 <HAL_CAN_Init+0x4a>
 8000e8c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000e90:	4896      	ldr	r0, [pc, #600]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000e92:	f7ff fe0a 	bl	8000aaa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7e5b      	ldrb	r3, [r3, #25]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d008      	beq.n	8000eb0 <HAL_CAN_Init+0x64>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7e5b      	ldrb	r3, [r3, #25]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d004      	beq.n	8000eb0 <HAL_CAN_Init+0x64>
 8000ea6:	f240 111f 	movw	r1, #287	; 0x11f
 8000eaa:	4890      	ldr	r0, [pc, #576]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000eac:	f7ff fdfd 	bl	8000aaa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7e9b      	ldrb	r3, [r3, #26]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d008      	beq.n	8000eca <HAL_CAN_Init+0x7e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7e9b      	ldrb	r3, [r3, #26]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d004      	beq.n	8000eca <HAL_CAN_Init+0x7e>
 8000ec0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ec4:	4889      	ldr	r0, [pc, #548]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000ec6:	f7ff fdf0 	bl	8000aaa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7edb      	ldrb	r3, [r3, #27]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d008      	beq.n	8000ee4 <HAL_CAN_Init+0x98>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7edb      	ldrb	r3, [r3, #27]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d004      	beq.n	8000ee4 <HAL_CAN_Init+0x98>
 8000eda:	f240 1121 	movw	r1, #289	; 0x121
 8000ede:	4883      	ldr	r0, [pc, #524]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000ee0:	f7ff fde3 	bl	8000aaa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7f1b      	ldrb	r3, [r3, #28]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <HAL_CAN_Init+0xb2>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7f1b      	ldrb	r3, [r3, #28]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d004      	beq.n	8000efe <HAL_CAN_Init+0xb2>
 8000ef4:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000ef8:	487c      	ldr	r0, [pc, #496]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000efa:	f7ff fdd6 	bl	8000aaa <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7f5b      	ldrb	r3, [r3, #29]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <HAL_CAN_Init+0xcc>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7f5b      	ldrb	r3, [r3, #29]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d004      	beq.n	8000f18 <HAL_CAN_Init+0xcc>
 8000f0e:	f240 1123 	movw	r1, #291	; 0x123
 8000f12:	4876      	ldr	r0, [pc, #472]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000f14:	f7ff fdc9 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <HAL_CAN_Init+0xfc>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f28:	d00e      	beq.n	8000f48 <HAL_CAN_Init+0xfc>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f32:	d009      	beq.n	8000f48 <HAL_CAN_Init+0xfc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000f3c:	d004      	beq.n	8000f48 <HAL_CAN_Init+0xfc>
 8000f3e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8000f42:	486a      	ldr	r0, [pc, #424]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000f44:	f7ff fdb1 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <HAL_CAN_Init+0x12c>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d00e      	beq.n	8000f78 <HAL_CAN_Init+0x12c>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f62:	d009      	beq.n	8000f78 <HAL_CAN_Init+0x12c>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8000f6c:	d004      	beq.n	8000f78 <HAL_CAN_Init+0x12c>
 8000f6e:	f240 1125 	movw	r1, #293	; 0x125
 8000f72:	485e      	ldr	r0, [pc, #376]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8000f74:	f7ff fd99 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d04f      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d04a      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f92:	d045      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000f9c:	d040      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fa6:	d03b      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb0:	d036      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000fba:	d031      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000fc4:	d02c      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fce:	d027      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8000fd8:	d022      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000fe2:	d01d      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8000fec:	d018      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000ff6:	d013      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001000:	d00e      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800100a:	d009      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001014:	d004      	beq.n	8001020 <HAL_CAN_Init+0x1d4>
 8001016:	f44f 7193 	mov.w	r1, #294	; 0x126
 800101a:	4834      	ldr	r0, [pc, #208]	; (80010ec <HAL_CAN_Init+0x2a0>)
 800101c:	f7ff fd45 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d027      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001030:	d022      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800103a:	d01d      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001044:	d018      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800104e:	d013      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8001058:	d00e      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001062:	d009      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800106c:	d004      	beq.n	8001078 <HAL_CAN_Init+0x22c>
 800106e:	f240 1127 	movw	r1, #295	; 0x127
 8001072:	481e      	ldr	r0, [pc, #120]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8001074:	f7ff fd19 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_CAN_Init+0x23e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001088:	d904      	bls.n	8001094 <HAL_CAN_Init+0x248>
 800108a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800108e:	4817      	ldr	r0, [pc, #92]	; (80010ec <HAL_CAN_Init+0x2a0>)
 8001090:	f7ff fd0b 	bl	8000aaa <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fd37 	bl	8000b14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0201 	orr.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b6:	f7ff fe99 	bl	8000dec <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010bc:	e018      	b.n	80010f0 <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010be:	f7ff fe95 	bl	8000dec <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d911      	bls.n	80010f0 <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2205      	movs	r2, #5
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0cb      	b.n	800127c <HAL_CAN_Init+0x430>
 80010e4:	40006400 	.word	0x40006400
 80010e8:	40006800 	.word	0x40006800
 80010ec:	08002ed4 	.word	0x08002ed4
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0df      	beq.n	80010be <HAL_CAN_Init+0x272>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0202 	bic.w	r2, r2, #2
 800110c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800110e:	f7ff fe6d 	bl	8000dec <HAL_GetTick>
 8001112:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001114:	e012      	b.n	800113c <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001116:	f7ff fe69 	bl	8000dec <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b0a      	cmp	r3, #10
 8001122:	d90b      	bls.n	800113c <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2205      	movs	r2, #5
 8001134:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e09f      	b.n	800127c <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1e5      	bne.n	8001116 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e1b      	ldrb	r3, [r3, #24]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d108      	bne.n	8001164 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e007      	b.n	8001174 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001172:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7e5b      	ldrb	r3, [r3, #25]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e007      	b.n	800119e <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7e9b      	ldrb	r3, [r3, #26]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0220 	bic.w	r2, r2, #32
 80011c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7edb      	ldrb	r3, [r3, #27]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d108      	bne.n	80011e2 <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0210 	bic.w	r2, r2, #16
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e007      	b.n	80011f2 <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7f1b      	ldrb	r3, [r3, #28]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d108      	bne.n	800120c <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0208 	orr.w	r2, r2, #8
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e007      	b.n	800121c <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0208 	bic.w	r2, r2, #8
 800121a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7f5b      	ldrb	r3, [r3, #29]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0204 	orr.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e007      	b.n	8001246 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0204 	bic.w	r2, r2, #4
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	ea42 0103 	orr.w	r1, r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d003      	beq.n	80012aa <HAL_CAN_ConfigFilter+0x26>
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	f040 812c 	bne.w	8001502 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b2:	d304      	bcc.n	80012be <HAL_CAN_ConfigFilter+0x3a>
 80012b4:	f44f 7154 	mov.w	r1, #848	; 0x350
 80012b8:	4897      	ldr	r0, [pc, #604]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 80012ba:	f7ff fbf6 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c6:	d304      	bcc.n	80012d2 <HAL_CAN_ConfigFilter+0x4e>
 80012c8:	f240 3151 	movw	r1, #849	; 0x351
 80012cc:	4892      	ldr	r0, [pc, #584]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 80012ce:	f7ff fbec 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d304      	bcc.n	80012e6 <HAL_CAN_ConfigFilter+0x62>
 80012dc:	f240 3152 	movw	r1, #850	; 0x352
 80012e0:	488d      	ldr	r0, [pc, #564]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 80012e2:	f7ff fbe2 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ee:	d304      	bcc.n	80012fa <HAL_CAN_ConfigFilter+0x76>
 80012f0:	f240 3153 	movw	r1, #851	; 0x353
 80012f4:	4888      	ldr	r0, [pc, #544]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 80012f6:	f7ff fbd8 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d008      	beq.n	8001314 <HAL_CAN_ConfigFilter+0x90>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d004      	beq.n	8001314 <HAL_CAN_ConfigFilter+0x90>
 800130a:	f44f 7155 	mov.w	r1, #852	; 0x354
 800130e:	4882      	ldr	r0, [pc, #520]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 8001310:	f7ff fbcb 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_CAN_ConfigFilter+0xaa>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d004      	beq.n	800132e <HAL_CAN_ConfigFilter+0xaa>
 8001324:	f240 3155 	movw	r1, #853	; 0x355
 8001328:	487b      	ldr	r0, [pc, #492]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 800132a:	f7ff fbbe 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d008      	beq.n	8001348 <HAL_CAN_ConfigFilter+0xc4>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d004      	beq.n	8001348 <HAL_CAN_ConfigFilter+0xc4>
 800133e:	f240 3156 	movw	r1, #854	; 0x356
 8001342:	4875      	ldr	r0, [pc, #468]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 8001344:	f7ff fbb1 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_CAN_ConfigFilter+0xde>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d004      	beq.n	8001362 <HAL_CAN_ConfigFilter+0xde>
 8001358:	f240 3157 	movw	r1, #855	; 0x357
 800135c:	486e      	ldr	r0, [pc, #440]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 800135e:	f7ff fba4 	bl	8000aaa <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001362:	4b6e      	ldr	r3, [pc, #440]	; (800151c <HAL_CAN_ConfigFilter+0x298>)
 8001364:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b1b      	cmp	r3, #27
 800136c:	d904      	bls.n	8001378 <HAL_CAN_ConfigFilter+0xf4>
 800136e:	f240 3172 	movw	r1, #882	; 0x372
 8001372:	4869      	ldr	r0, [pc, #420]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 8001374:	f7ff fb99 	bl	8000aaa <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	2b1b      	cmp	r3, #27
 800137e:	d904      	bls.n	800138a <HAL_CAN_ConfigFilter+0x106>
 8001380:	f240 3173 	movw	r1, #883	; 0x373
 8001384:	4864      	ldr	r0, [pc, #400]	; (8001518 <HAL_CAN_ConfigFilter+0x294>)
 8001386:	f7ff fb90 	bl	8000aaa <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	431a      	orrs	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2201      	movs	r2, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	401a      	ands	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d123      	bne.n	8001430 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800140a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3248      	adds	r2, #72	; 0x48
 8001410:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001424:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001426:	6979      	ldr	r1, [r7, #20]
 8001428:	3348      	adds	r3, #72	; 0x48
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d122      	bne.n	800147e <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001458:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3248      	adds	r2, #72	; 0x48
 800145e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001472:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001474:	6979      	ldr	r1, [r7, #20]
 8001476:	3348      	adds	r3, #72	; 0x48
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	401a      	ands	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001498:	e007      	b.n	80014aa <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	401a      	ands	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014c4:	e007      	b.n	80014d6 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014f4:	f023 0201 	bic.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e006      	b.n	8001510 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
  }
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	08002ed4 	.word	0x08002ed4
 800151c:	40006400 	.word	0x40006400

08001520 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d12e      	bne.n	8001592 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff fc4e 	bl	8000dec <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001552:	e012      	b.n	800157a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001554:	f7ff fc4a 	bl	8000dec <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90b      	bls.n	800157a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e012      	b.n	80015a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e006      	b.n	80015a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
  }
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_CAN_AddTxMessage+0x38>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d004      	beq.n	80015e0 <HAL_CAN_AddTxMessage+0x38>
 80015d6:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80015da:	4884      	ldr	r0, [pc, #528]	; (80017ec <HAL_CAN_AddTxMessage+0x244>)
 80015dc:	f7ff fa65 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_CAN_AddTxMessage+0x52>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d004      	beq.n	80015fa <HAL_CAN_AddTxMessage+0x52>
 80015f0:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80015f4:	487d      	ldr	r0, [pc, #500]	; (80017ec <HAL_CAN_AddTxMessage+0x244>)
 80015f6:	f7ff fa58 	bl	8000aaa <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d904      	bls.n	800160c <HAL_CAN_AddTxMessage+0x64>
 8001602:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8001606:	4879      	ldr	r0, [pc, #484]	; (80017ec <HAL_CAN_AddTxMessage+0x244>)
 8001608:	f7ff fa4f 	bl	8000aaa <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10a      	bne.n	800162a <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800161c:	d30f      	bcc.n	800163e <HAL_CAN_AddTxMessage+0x96>
 800161e:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8001622:	4872      	ldr	r0, [pc, #456]	; (80017ec <HAL_CAN_AddTxMessage+0x244>)
 8001624:	f7ff fa41 	bl	8000aaa <assert_failed>
 8001628:	e009      	b.n	800163e <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001632:	d304      	bcc.n	800163e <HAL_CAN_AddTxMessage+0x96>
 8001634:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8001638:	486c      	ldr	r0, [pc, #432]	; (80017ec <HAL_CAN_AddTxMessage+0x244>)
 800163a:	f7ff fa36 	bl	8000aaa <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	7d1b      	ldrb	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_CAN_AddTxMessage+0xb0>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	7d1b      	ldrb	r3, [r3, #20]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d004      	beq.n	8001658 <HAL_CAN_AddTxMessage+0xb0>
 800164e:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8001652:	4866      	ldr	r0, [pc, #408]	; (80017ec <HAL_CAN_AddTxMessage+0x244>)
 8001654:	f7ff fa29 	bl	8000aaa <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d003      	beq.n	8001666 <HAL_CAN_AddTxMessage+0xbe>
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	2b02      	cmp	r3, #2
 8001662:	f040 80b8 	bne.w	80017d6 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10a      	bne.n	8001686 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a0 	beq.w	80017c6 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	0e1b      	lsrs	r3, r3, #24
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d907      	bls.n	80016a6 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e09e      	b.n	80017e4 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10d      	bne.n	80016d4 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	6809      	ldr	r1, [r1, #0]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3318      	adds	r3, #24
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	440b      	add	r3, r1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e00f      	b.n	80016f4 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016e4:	68f9      	ldr	r1, [r7, #12]
 80016e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3318      	adds	r3, #24
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	440b      	add	r3, r1
 80016f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3318      	adds	r3, #24
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	440b      	add	r3, r1
 8001704:	3304      	adds	r3, #4
 8001706:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	7d1b      	ldrb	r3, [r3, #20]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d111      	bne.n	8001734 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3318      	adds	r3, #24
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3318      	adds	r3, #24
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	440b      	add	r3, r1
 8001730:	3304      	adds	r3, #4
 8001732:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3307      	adds	r3, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	061a      	lsls	r2, r3, #24
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3306      	adds	r3, #6
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	041b      	lsls	r3, r3, #16
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3305      	adds	r3, #5
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4313      	orrs	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	3204      	adds	r2, #4
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4610      	mov	r0, r2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	6811      	ldr	r1, [r2, #0]
 800175c:	ea43 0200 	orr.w	r2, r3, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	440b      	add	r3, r1
 8001766:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800176a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3303      	adds	r3, #3
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	061a      	lsls	r2, r3, #24
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3302      	adds	r3, #2
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	4313      	orrs	r3, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	4610      	mov	r0, r2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	6811      	ldr	r1, [r2, #0]
 8001792:	ea43 0200 	orr.w	r2, r3, r0
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	440b      	add	r3, r1
 800179c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3318      	adds	r3, #24
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6811      	ldr	r1, [r2, #0]
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3318      	adds	r3, #24
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	440b      	add	r3, r1
 80017c0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e00e      	b.n	80017e4 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e006      	b.n	80017e4 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	08002ed4 	.word	0x08002ed4

080017f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001804:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_CAN_GetRxMessage+0x2c>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d004      	beq.n	800181c <HAL_CAN_GetRxMessage+0x2c>
 8001812:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8001816:	4884      	ldr	r0, [pc, #528]	; (8001a28 <HAL_CAN_GetRxMessage+0x238>)
 8001818:	f7ff f947 	bl	8000aaa <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d003      	beq.n	800182a <HAL_CAN_GetRxMessage+0x3a>
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 80f3 	bne.w	8001a10 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10e      	bne.n	800184e <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d116      	bne.n	800186c <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0e7      	b.n	8001a1e <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0d8      	b.n	8001a1e <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	331b      	adds	r3, #27
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	4413      	add	r3, r2
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0204 	and.w	r2, r3, #4
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	331b      	adds	r3, #27
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	0d5b      	lsrs	r3, r3, #21
 800189a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	331b      	adds	r3, #27
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	331b      	adds	r3, #27
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0202 	and.w	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	331b      	adds	r3, #27
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	4413      	add	r3, r2
 80018de:	3304      	adds	r3, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 020f 	and.w	r2, r3, #15
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	331b      	adds	r3, #27
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4413      	add	r3, r2
 80018f6:	3304      	adds	r3, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	331b      	adds	r3, #27
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4413      	add	r3, r2
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0c1b      	lsrs	r3, r3, #16
 8001914:	b29a      	uxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0a1a      	lsrs	r2, r3, #8
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0c1a      	lsrs	r2, r3, #16
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3302      	adds	r3, #2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	4413      	add	r3, r2
 800196e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0e1a      	lsrs	r2, r3, #24
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3303      	adds	r3, #3
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0a1a      	lsrs	r2, r3, #8
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3305      	adds	r3, #5
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0c1a      	lsrs	r2, r3, #16
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3306      	adds	r3, #6
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0e1a      	lsrs	r2, r3, #24
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3307      	adds	r3, #7
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e006      	b.n	8001a1e <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08002ed4 	.word	0x08002ed4

08001a2c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d004      	beq.n	8001a58 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001a4e:	f240 614c 	movw	r1, #1612	; 0x64c
 8001a52:	480f      	ldr	r0, [pc, #60]	; (8001a90 <HAL_CAN_GetRxFifoFillLevel+0x64>)
 8001a54:	f7ff f829 	bl	8000aaa <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d002      	beq.n	8001a64 <HAL_CAN_GetRxFifoFillLevel+0x38>
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d10f      	bne.n	8001a84 <HAL_CAN_GetRxFifoFillLevel+0x58>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e005      	b.n	8001a84 <HAL_CAN_GetRxFifoFillLevel+0x58>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08002ed4 	.word	0x08002ed4

08001a94 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa2:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d002      	beq.n	8001ab0 <HAL_CAN_GetState+0x1c>
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d112      	bne.n	8001ad6 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	e008      	b.n	8001ad6 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d00f      	beq.n	8001c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d00c      	beq.n	8001c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d009      	beq.n	8001c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d006      	beq.n	8001c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b03      	cmp	r3, #3
 8001c84:	d003      	beq.n	8001c8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001c86:	2192      	movs	r1, #146	; 0x92
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001c8a:	f7fe ff0e 	bl	8000aaa <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff34 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	08002f0c 	.word	0x08002f0c

08001ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d903      	bls.n	8001cc0 <HAL_NVIC_SetPriority+0x20>
 8001cb8:	21aa      	movs	r1, #170	; 0xaa
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <HAL_NVIC_SetPriority+0x54>)
 8001cbc:	f7fe fef5 	bl	8000aaa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	d903      	bls.n	8001cce <HAL_NVIC_SetPriority+0x2e>
 8001cc6:	21ab      	movs	r1, #171	; 0xab
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <HAL_NVIC_SetPriority+0x54>)
 8001cca:	f7fe feee 	bl	8000aaa <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cce:	f7ff ff39 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	6978      	ldr	r0, [r7, #20]
 8001cda:	f7ff ff6b 	bl	8001bb4 <NVIC_EncodePriority>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff3a 	bl	8001b60 <__NVIC_SetPriority>
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	08002f0c 	.word	0x08002f0c

08001cf8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff8b 	bl	8001c1c <SysTick_Config>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a39      	ldr	r2, [pc, #228]	; (8001e10 <HAL_GPIO_Init+0x100>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d023      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <HAL_GPIO_Init+0x104>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <HAL_GPIO_Init+0x108>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01b      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a36      	ldr	r2, [pc, #216]	; (8001e1c <HAL_GPIO_Init+0x10c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d017      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a35      	ldr	r2, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x110>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a34      	ldr	r2, [pc, #208]	; (8001e24 <HAL_GPIO_Init+0x114>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00f      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <HAL_GPIO_Init+0x118>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00b      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <HAL_GPIO_Init+0x11c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_GPIO_Init+0x120>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x66>
 8001d6e:	21ac      	movs	r1, #172	; 0xac
 8001d70:	4830      	ldr	r0, [pc, #192]	; (8001e34 <HAL_GPIO_Init+0x124>)
 8001d72:	f7fe fe9a 	bl	8000aaa <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x7c>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x84>
 8001d8c:	21ad      	movs	r1, #173	; 0xad
 8001d8e:	4829      	ldr	r0, [pc, #164]	; (8001e34 <HAL_GPIO_Init+0x124>)
 8001d90:	f7fe fe8b 	bl	8000aaa <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d035      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d031      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b11      	cmp	r3, #17
 8001daa:	d02d      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d029      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b12      	cmp	r3, #18
 8001dba:	d025      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001dc4:	d020      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001dce:	d01b      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001dd8:	d016      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001de2:	d011      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001dec:	d00c      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001df6:	d007      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0xf8>
 8001e00:	21ae      	movs	r1, #174	; 0xae
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <HAL_GPIO_Init+0x124>)
 8001e04:	f7fe fe51 	bl	8000aaa <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	e240      	b.n	8002290 <HAL_GPIO_Init+0x580>
 8001e0e:	bf00      	nop
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021c00 	.word	0x40021c00
 8001e30:	40022000 	.word	0x40022000
 8001e34:	08002f48 	.word	0x08002f48
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 821a 	bne.w	800228a <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d144      	bne.n	8001ef8 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00f      	beq.n	8001e96 <HAL_GPIO_Init+0x186>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d00b      	beq.n	8001e96 <HAL_GPIO_Init+0x186>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x186>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x186>
 8001e8e:	21c0      	movs	r1, #192	; 0xc0
 8001e90:	4892      	ldr	r0, [pc, #584]	; (80020dc <HAL_GPIO_Init+0x3cc>)
 8001e92:	f7fe fe0a 	bl	8000aaa <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d027      	beq.n	8001f54 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <HAL_GPIO_Init+0x214>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x214>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x214>
 8001f1c:	21d1      	movs	r1, #209	; 0xd1
 8001f1e:	486f      	ldr	r0, [pc, #444]	; (80020dc <HAL_GPIO_Init+0x3cc>)
 8001f20:	f7fe fdc3 	bl	8000aaa <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	f040 80bf 	bne.w	80020e0 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8093 	beq.w	8002092 <HAL_GPIO_Init+0x382>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	f000 808e 	beq.w	8002092 <HAL_GPIO_Init+0x382>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8089 	beq.w	8002092 <HAL_GPIO_Init+0x382>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8084 	beq.w	8002092 <HAL_GPIO_Init+0x382>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d07b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d077      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d073      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d06f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d06b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d067      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d063      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d05f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d05b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d057      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d053      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d04f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	d04b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d047      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b09      	cmp	r3, #9
 8002008:	d043      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b07      	cmp	r3, #7
 8002010:	d03f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b07      	cmp	r3, #7
 8002018:	d03b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b07      	cmp	r3, #7
 8002020:	d037      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b08      	cmp	r3, #8
 8002028:	d033      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b08      	cmp	r3, #8
 8002030:	d02f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b09      	cmp	r3, #9
 8002040:	d027      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b09      	cmp	r3, #9
 8002048:	d023      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b0a      	cmp	r3, #10
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d01b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b0b      	cmp	r3, #11
 8002060:	d017      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d00f      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b0d      	cmp	r3, #13
 8002078:	d00b      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x382>
 800208a:	21de      	movs	r1, #222	; 0xde
 800208c:	4813      	ldr	r0, [pc, #76]	; (80020dc <HAL_GPIO_Init+0x3cc>)
 800208e:	f7fe fd0c 	bl	8000aaa <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	69b9      	ldr	r1, [r7, #24]
 80020d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80020da:	e001      	b.n	80020e0 <HAL_GPIO_Init+0x3d0>
 80020dc:	08002f48 	.word	0x08002f48
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80b4 	beq.w	800228a <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b5f      	ldr	r3, [pc, #380]	; (80022a4 <HAL_GPIO_Init+0x594>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5e      	ldr	r2, [pc, #376]	; (80022a4 <HAL_GPIO_Init+0x594>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5c      	ldr	r3, [pc, #368]	; (80022a4 <HAL_GPIO_Init+0x594>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a5a      	ldr	r2, [pc, #360]	; (80022a8 <HAL_GPIO_Init+0x598>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a51      	ldr	r2, [pc, #324]	; (80022ac <HAL_GPIO_Init+0x59c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x4b2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <HAL_GPIO_Init+0x5a0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x4ae>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4f      	ldr	r2, [pc, #316]	; (80022b4 <HAL_GPIO_Init+0x5a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x4aa>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4e      	ldr	r2, [pc, #312]	; (80022b8 <HAL_GPIO_Init+0x5a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x4a6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4d      	ldr	r2, [pc, #308]	; (80022bc <HAL_GPIO_Init+0x5ac>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x4a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <HAL_GPIO_Init+0x5b0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x49e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4b      	ldr	r2, [pc, #300]	; (80022c4 <HAL_GPIO_Init+0x5b4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x49a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_GPIO_Init+0x5b8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x496>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x4b4>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4934      	ldr	r1, [pc, #208]	; (80022a8 <HAL_GPIO_Init+0x598>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002206:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002230:	4a26      	ldr	r2, [pc, #152]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_GPIO_Init+0x5bc>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f add0 	bls.w	8001e38 <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40021400 	.word	0x40021400
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40021c00 	.word	0x40021c00
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <HAL_GPIO_WritePin+0x20>
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <HAL_GPIO_WritePin+0x2a>
 80022f0:	f240 119d 	movw	r1, #413	; 0x19d
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <HAL_GPIO_WritePin+0x60>)
 80022f6:	f7fe fbd8 	bl	8000aaa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80022fa:	787b      	ldrb	r3, [r7, #1]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_WritePin+0x40>
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d004      	beq.n	8002310 <HAL_GPIO_WritePin+0x40>
 8002306:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800230a:	4809      	ldr	r0, [pc, #36]	; (8002330 <HAL_GPIO_WritePin+0x60>)
 800230c:	f7fe fbcd 	bl	8000aaa <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	08002f48 	.word	0x08002f48

08002334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e316      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	d903      	bls.n	8002356 <HAL_RCC_OscConfig+0x22>
 800234e:	21e8      	movs	r1, #232	; 0xe8
 8002350:	48a3      	ldr	r0, [pc, #652]	; (80025e0 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	f7fe fbaa 	bl	8000aaa <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8088 	beq.w	8002474 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <HAL_RCC_OscConfig+0x54>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d008      	beq.n	8002388 <HAL_RCC_OscConfig+0x54>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237e:	d003      	beq.n	8002388 <HAL_RCC_OscConfig+0x54>
 8002380:	21ed      	movs	r1, #237	; 0xed
 8002382:	4897      	ldr	r0, [pc, #604]	; (80025e0 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	f7fe fb91 	bl	8000aaa <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002388:	4b96      	ldr	r3, [pc, #600]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b04      	cmp	r3, #4
 8002392:	d00c      	beq.n	80023ae <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002394:	4b93      	ldr	r3, [pc, #588]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239c:	2b08      	cmp	r3, #8
 800239e:	d112      	bne.n	80023c6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a0:	4b90      	ldr	r3, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ac:	d10b      	bne.n	80023c6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ae:	4b8d      	ldr	r3, [pc, #564]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d05b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d157      	bne.n	8002472 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e2d6      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0xaa>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e01d      	b.n	800241a <HAL_RCC_OscConfig+0xe6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0xce>
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7d      	ldr	r2, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0xe6>
 8002402:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a74      	ldr	r2, [pc, #464]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe fce3 	bl	8000dec <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242a:	f7fe fcdf 	bl	8000dec <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e29b      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243c:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0xf6>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fccf 	bl	8000dec <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002452:	f7fe fccb 	bl	8000dec <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e287      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002464:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x11e>
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002472:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d079      	beq.n	8002574 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_OscConfig+0x166>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d004      	beq.n	800249a <HAL_RCC_OscConfig+0x166>
 8002490:	f240 111f 	movw	r1, #287	; 0x11f
 8002494:	4852      	ldr	r0, [pc, #328]	; (80025e0 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	f7fe fb08 	bl	8000aaa <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b1f      	cmp	r3, #31
 80024a0:	d904      	bls.n	80024ac <HAL_RCC_OscConfig+0x178>
 80024a2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80024a6:	484e      	ldr	r0, [pc, #312]	; (80025e0 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	f7fe faff 	bl	8000aaa <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ac:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d11c      	bne.n	80024fe <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c4:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d0:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_OscConfig+0x1b4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e245      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	493b      	ldr	r1, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fc:	e03a      	b.n	8002574 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d020      	beq.n	8002548 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002506:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_RCC_OscConfig+0x2b4>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fc6e 	bl	8000dec <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe fc6a 	bl	8000dec <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e226      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4928      	ldr	r1, [pc, #160]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
 8002546:	e015      	b.n	8002574 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x2b4>)
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fc4d 	bl	8000dec <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7fe fc49 	bl	8000dec <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e205      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d046      	beq.n	800260e <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_OscConfig+0x266>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d004      	beq.n	800259a <HAL_RCC_OscConfig+0x266>
 8002590:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002594:	4812      	ldr	r0, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x2ac>)
 8002596:	f7fe fa88 	bl	8000aaa <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_OscConfig+0x2b8>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe fc20 	bl	8000dec <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe fc1c 	bl	8000dec <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1d8      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_RCC_OscConfig+0x2b0>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x27c>
 80025ce:	e01e      	b.n	800260e <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_OscConfig+0x2b8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7fe fc09 	bl	8000dec <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e011      	b.n	8002602 <HAL_RCC_OscConfig+0x2ce>
 80025de:	bf00      	nop
 80025e0:	08002f84 	.word	0x08002f84
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fe fbfc 	bl	8000dec <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1b8      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002602:	4b97      	ldr	r3, [pc, #604]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80a8 	beq.w	800276c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00c      	beq.n	8002642 <HAL_RCC_OscConfig+0x30e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d008      	beq.n	8002642 <HAL_RCC_OscConfig+0x30e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b05      	cmp	r3, #5
 8002636:	d004      	beq.n	8002642 <HAL_RCC_OscConfig+0x30e>
 8002638:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800263c:	4889      	ldr	r0, [pc, #548]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 800263e:	f7fe fa34 	bl	8000aaa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b83      	ldr	r3, [pc, #524]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a82      	ldr	r2, [pc, #520]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x534>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <HAL_RCC_OscConfig+0x534>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7a      	ldr	r2, [pc, #488]	; (8002868 <HAL_RCC_OscConfig+0x534>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7fe fbb1 	bl	8000dec <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7fe fbad 	bl	8000dec <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e169      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b71      	ldr	r3, [pc, #452]	; (8002868 <HAL_RCC_OscConfig+0x534>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x38e>
 80026b4:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a69      	ldr	r2, [pc, #420]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x3c8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x3b0>
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a64      	ldr	r2, [pc, #400]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
 80026d6:	4b62      	ldr	r3, [pc, #392]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0x3c8>
 80026e4:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a5a      	ldr	r2, [pc, #360]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fb72 	bl	8000dec <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fb6e 	bl	8000dec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e128      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ee      	beq.n	800270c <HAL_RCC_OscConfig+0x3d8>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fb5c 	bl	8000dec <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fb58 	bl	8000dec <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e112      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ee      	bne.n	8002738 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x45a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d008      	beq.n	800278e <HAL_RCC_OscConfig+0x45a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d004      	beq.n	800278e <HAL_RCC_OscConfig+0x45a>
 8002784:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002788:	4836      	ldr	r0, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 800278a:	f7fe f98e 	bl	8000aaa <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80ed 	beq.w	8002972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x52c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	f000 80ae 	beq.w	8002902 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f040 8092 	bne.w	80028d4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <HAL_RCC_OscConfig+0x498>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c0:	d004      	beq.n	80027cc <HAL_RCC_OscConfig+0x498>
 80027c2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80027c6:	4827      	ldr	r0, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 80027c8:	f7fe f96f 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	2b3f      	cmp	r3, #63	; 0x3f
 80027d2:	d904      	bls.n	80027de <HAL_RCC_OscConfig+0x4aa>
 80027d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80027d8:	4822      	ldr	r0, [pc, #136]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 80027da:	f7fe f966 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	2b31      	cmp	r3, #49	; 0x31
 80027e4:	d904      	bls.n	80027f0 <HAL_RCC_OscConfig+0x4bc>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80027ee:	d904      	bls.n	80027fa <HAL_RCC_OscConfig+0x4c6>
 80027f0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80027f4:	481b      	ldr	r0, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 80027f6:	f7fe f958 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d010      	beq.n	8002824 <HAL_RCC_OscConfig+0x4f0>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	2b04      	cmp	r3, #4
 8002808:	d00c      	beq.n	8002824 <HAL_RCC_OscConfig+0x4f0>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	2b06      	cmp	r3, #6
 8002810:	d008      	beq.n	8002824 <HAL_RCC_OscConfig+0x4f0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	2b08      	cmp	r3, #8
 8002818:	d004      	beq.n	8002824 <HAL_RCC_OscConfig+0x4f0>
 800281a:	f240 11db 	movw	r1, #475	; 0x1db
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 8002820:	f7fe f943 	bl	8000aaa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d903      	bls.n	8002834 <HAL_RCC_OscConfig+0x500>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d904      	bls.n	800283e <HAL_RCC_OscConfig+0x50a>
 8002834:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <HAL_RCC_OscConfig+0x530>)
 800283a:	f7fe f936 	bl	8000aaa <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x538>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fad2 	bl	8000dec <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e011      	b.n	8002870 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe face 	bl	8000dec <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d90a      	bls.n	8002870 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e08a      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	08002f84 	.word	0x08002f84
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <HAL_RCC_OscConfig+0x648>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e7      	bne.n	800284c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	019b      	lsls	r3, r3, #6
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	4936      	ldr	r1, [pc, #216]	; (800297c <HAL_RCC_OscConfig+0x648>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_OscConfig+0x64c>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fa9e 	bl	8000dec <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fa9a 	bl	8000dec <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e056      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_OscConfig+0x648>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x580>
 80028d2:	e04e      	b.n	8002972 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x64c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fa87 	bl	8000dec <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fa83 	bl	8000dec <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e03f      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x648>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5ae>
 8002900:	e037      	b.n	8002972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e032      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x648>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d028      	beq.n	800296e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d121      	bne.n	800296e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d11a      	bne.n	800296e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002944:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002946:	4293      	cmp	r3, r2
 8002948:	d111      	bne.n	800296e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d107      	bne.n	800296e <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	42470060 	.word	0x42470060

08002984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e174      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x24>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d904      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x2e>
 80029a8:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80029ac:	487b      	ldr	r0, [pc, #492]	; (8002b9c <HAL_RCC_ClockConfig+0x218>)
 80029ae:	f7fe f87c 	bl	8000aaa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d019      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d016      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d010      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d00d      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d00a      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d007      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d004      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
 80029e2:	f240 215d 	movw	r1, #605	; 0x25d
 80029e6:	486d      	ldr	r0, [pc, #436]	; (8002b9c <HAL_RCC_ClockConfig+0x218>)
 80029e8:	f7fe f85f 	bl	8000aaa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <HAL_RCC_ClockConfig+0x21c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d90c      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <HAL_RCC_ClockConfig+0x21c>)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCC_ClockConfig+0x21c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e136      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d049      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a5c      	ldr	r2, [pc, #368]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002a32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a44:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002a4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d024      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b90      	cmp	r3, #144	; 0x90
 8002a66:	d01c      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2ba0      	cmp	r3, #160	; 0xa0
 8002a6e:	d018      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2bb0      	cmp	r3, #176	; 0xb0
 8002a76:	d014      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2bd0      	cmp	r3, #208	; 0xd0
 8002a86:	d00c      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2be0      	cmp	r3, #224	; 0xe0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2bf0      	cmp	r3, #240	; 0xf0
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x11e>
 8002a98:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002a9c:	483f      	ldr	r0, [pc, #252]	; (8002b9c <HAL_RCC_ClockConfig+0x218>)
 8002a9e:	f7fe f804 	bl	8000aaa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	493d      	ldr	r1, [pc, #244]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d059      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d004      	beq.n	8002aea <HAL_RCC_ClockConfig+0x166>
 8002ae0:	f240 2187 	movw	r1, #647	; 0x287
 8002ae4:	482d      	ldr	r0, [pc, #180]	; (8002b9c <HAL_RCC_ClockConfig+0x218>)
 8002ae6:	f7fd ffe0 	bl	8000aaa <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e0bf      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0af      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0a7      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4919      	ldr	r1, [pc, #100]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe f952 	bl	8000dec <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe f94e 	bl	8000dec <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e08f      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_RCC_ClockConfig+0x220>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_ClockConfig+0x21c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d212      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_RCC_ClockConfig+0x21c>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_ClockConfig+0x21c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e072      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2fe>
 8002b9c:	08002f84 	.word	0x08002f84
 8002ba0:	40023c00 	.word	0x40023c00
 8002ba4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d025      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d018      	beq.n	8002bee <HAL_RCC_ClockConfig+0x26a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	d013      	beq.n	8002bee <HAL_RCC_ClockConfig+0x26a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002bce:	d00e      	beq.n	8002bee <HAL_RCC_ClockConfig+0x26a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x26a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002be2:	d004      	beq.n	8002bee <HAL_RCC_ClockConfig+0x26a>
 8002be4:	f240 21c5 	movw	r1, #709	; 0x2c5
 8002be8:	4828      	ldr	r0, [pc, #160]	; (8002c8c <HAL_RCC_ClockConfig+0x308>)
 8002bea:	f7fd ff5e 	bl	8000aaa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_ClockConfig+0x30c>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x30c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d026      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d018      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2c2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d013      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2c2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c26:	d00e      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2c2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2c2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002c3a:	d004      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2c2>
 8002c3c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8002c40:	4812      	ldr	r0, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x308>)
 8002c42:	f7fd ff32 	bl	8000aaa <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c46:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_RCC_ClockConfig+0x30c>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	490e      	ldr	r1, [pc, #56]	; (8002c90 <HAL_RCC_ClockConfig+0x30c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5a:	f000 f821 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_ClockConfig+0x30c>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	490a      	ldr	r1, [pc, #40]	; (8002c94 <HAL_RCC_ClockConfig+0x310>)
 8002c6c:	5ccb      	ldrb	r3, [r1, r3]
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x314>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x318>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f872 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08002f84 	.word	0x08002f84
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08002fbc 	.word	0x08002fbc
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb8:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	f200 80bd 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x3a>
 8002cd2:	e0b7      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cd6:	60bb      	str	r3, [r7, #8]
       break;
 8002cd8:	e0b7      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cda:	4b61      	ldr	r3, [pc, #388]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cdc:	60bb      	str	r3, [r7, #8]
      break;
 8002cde:	e0b4      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce0:	4b5d      	ldr	r3, [pc, #372]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04d      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf6:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	ea02 0800 	and.w	r8, r2, r0
 8002d0e:	ea03 0901 	and.w	r9, r3, r1
 8002d12:	4640      	mov	r0, r8
 8002d14:	4649      	mov	r1, r9
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	014b      	lsls	r3, r1, #5
 8002d20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d24:	0142      	lsls	r2, r0, #5
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	ebb0 0008 	subs.w	r0, r0, r8
 8002d2e:	eb61 0109 	sbc.w	r1, r1, r9
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	018b      	lsls	r3, r1, #6
 8002d3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d40:	0182      	lsls	r2, r0, #6
 8002d42:	1a12      	subs	r2, r2, r0
 8002d44:	eb63 0301 	sbc.w	r3, r3, r1
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	00d9      	lsls	r1, r3, #3
 8002d52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d56:	00d0      	lsls	r0, r2, #3
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	eb12 0208 	adds.w	r2, r2, r8
 8002d60:	eb43 0309 	adc.w	r3, r3, r9
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	0259      	lsls	r1, r3, #9
 8002d6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d72:	0250      	lsls	r0, r2, #9
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f7fd fa20 	bl	80001c8 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e04a      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	ea02 0400 	and.w	r4, r2, r0
 8002daa:	ea03 0501 	and.w	r5, r3, r1
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	014b      	lsls	r3, r1, #5
 8002dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dc0:	0142      	lsls	r2, r0, #5
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	1b00      	subs	r0, r0, r4
 8002dc8:	eb61 0105 	sbc.w	r1, r1, r5
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	018b      	lsls	r3, r1, #6
 8002dd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dda:	0182      	lsls	r2, r0, #6
 8002ddc:	1a12      	subs	r2, r2, r0
 8002dde:	eb63 0301 	sbc.w	r3, r3, r1
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	00d9      	lsls	r1, r3, #3
 8002dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002df0:	00d0      	lsls	r0, r2, #3
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	1912      	adds	r2, r2, r4
 8002df8:	eb45 0303 	adc.w	r3, r5, r3
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0299      	lsls	r1, r3, #10
 8002e06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e0a:	0290      	lsls	r0, r2, #10
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	f7fd f9d4 	bl	80001c8 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	60bb      	str	r3, [r7, #8]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e46:	60bb      	str	r3, [r7, #8]
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <__libc_init_array>:
 8002e64:	b570      	push	{r4, r5, r6, lr}
 8002e66:	4d0d      	ldr	r5, [pc, #52]	; (8002e9c <__libc_init_array+0x38>)
 8002e68:	4c0d      	ldr	r4, [pc, #52]	; (8002ea0 <__libc_init_array+0x3c>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	2600      	movs	r6, #0
 8002e70:	42a6      	cmp	r6, r4
 8002e72:	d109      	bne.n	8002e88 <__libc_init_array+0x24>
 8002e74:	4d0b      	ldr	r5, [pc, #44]	; (8002ea4 <__libc_init_array+0x40>)
 8002e76:	4c0c      	ldr	r4, [pc, #48]	; (8002ea8 <__libc_init_array+0x44>)
 8002e78:	f000 f820 	bl	8002ebc <_init>
 8002e7c:	1b64      	subs	r4, r4, r5
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	2600      	movs	r6, #0
 8002e82:	42a6      	cmp	r6, r4
 8002e84:	d105      	bne.n	8002e92 <__libc_init_array+0x2e>
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8c:	4798      	blx	r3
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7ee      	b.n	8002e70 <__libc_init_array+0xc>
 8002e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e96:	4798      	blx	r3
 8002e98:	3601      	adds	r6, #1
 8002e9a:	e7f2      	b.n	8002e82 <__libc_init_array+0x1e>
 8002e9c:	08002fd4 	.word	0x08002fd4
 8002ea0:	08002fd4 	.word	0x08002fd4
 8002ea4:	08002fd4 	.word	0x08002fd4
 8002ea8:	08002fd8 	.word	0x08002fd8

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <_init>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr

08002ec8 <_fini>:
 8002ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eca:	bf00      	nop
 8002ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ece:	bc08      	pop	{r3}
 8002ed0:	469e      	mov	lr, r3
 8002ed2:	4770      	bx	lr
